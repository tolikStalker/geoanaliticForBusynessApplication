import psycopg2
from psycopg2.extras import execute_values
from selenium import webdriver
from selenium.common import NoSuchElementException, TimeoutException
from selenium.webdriver.edge.service import Service
from selenium.webdriver.edge.options import Options
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time

db_params = {
    "dbname": "diplom",
    "user": "postgres",
    "password": "chkaf042do",
    "host": "localhost",
    "port": "5432",
}

def save_to_db(data):
    conn = psycopg2.connect(**db_params)
    cursor = conn.cursor()
    
    query = """
        INSERT INTO cian_listings (cian_id, coordinates, price, total_area)
        VALUES %s
        ON CONFLICT (cian_id) DO NOTHING
    """
    
    execute_values(cursor, query, data)
    
    conn.commit()
    cursor.close()
    conn.close()

options = Options()
options.add_argument("--disable-blink-features=AutomationControlled")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ Selenium
options.add_experimental_option("excludeSwitches", ["enable-automation"])  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤ Edge
options.add_experimental_option("useAutomationExtension", False)

service = Service(executable_path='./msedgedriver.exe')
driver = webdriver.Edge(service=service,options=options)

driver.get("https://rostov.cian.ru/snyat-pomeshenie-rostovskaya-oblast-taganrog/")
data=[]

try:
    while True:
        wait = WebDriverWait(driver, 10)  # Wait up to 10 seconds

        cian_config_value = None
        for _ in range(10):  # –ü–æ–ø—ã—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            cian_config_value = driver.execute_script(
                "return window._cianConfig ? window._cianConfig['legacy-commercial-serp-frontend'] : null;"
            )
            if cian_config_value:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break
            time.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        try:
            active_li = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "li[class*='item--active']")))
            next_li = active_li.find_element(By.XPATH, "following-sibling::li[1]")
        except Exception:
            print("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            break
        
        try:
            for offer in cian_config_value[-1]['value']['results']['offers']:
                data.append((
                offer['cianId'],
                f"POINT({offer['geo']['coordinates']['lng']} {offer['geo']['coordinates']['lat']})",
                offer['priceTotalPerMonthRur'],
                offer['totalArea'],
                ))
        except KeyError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            break
            
        if next_li:
            # –ù–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ li
            next_link = next_li.find_element(By.TAG_NAME, "a").get_attribute("href")
            print(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ: {next_link}")
            driver.get(next_link)  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        else:
            print("–°–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç (—ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
            break
        
    save_to_db(data)


except NoSuchElementException:
    print('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    driver.quit()
except TimeoutException:
    print('–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
    driver.quit()

driver.quit()
